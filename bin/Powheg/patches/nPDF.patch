diff -ru POWHEG-BOX/include/pwhg_pdf.h POWHEG-BOX-MOD/include/pwhg_pdf.h
--- POWHEG-BOX/include/pwhg_pdf.h	2018-12-07 18:52:47.000000001 +0100
+++ POWHEG-BOX-MOD/include/pwhg_pdf.h	2018-12-07 15:29:27.000000001 +0100
@@ -1,8 +1,10 @@
 c -*- Fortran -*-
       integer pdf_ih1,pdf_ih2,pdf_ndns1,pdf_ndns2,pdf_nparton
       integer pdf_ndns1lhe,pdf_ndns2lhe
+      integer npdf_ia1,npdf_ia2,npdf_set
       logical pdf_dis_photon
       real * 8 pdf_q2min
       common/pwhg_pdf/pdf_q2min,pdf_ih1,pdf_ih2,pdf_ndns1,pdf_ndns2,
-     1     pdf_nparton,pdf_dis_photon,pdf_ndns1lhe,pdf_ndns2lhe
+     1     pdf_nparton,pdf_dis_photon,pdf_ndns1lhe,pdf_ndns2lhe,
+     2     npdf_ia1,npdf_ia2,npdf_set
       save /pwhg_pdf/
diff -ru POWHEG-BOX/init_phys.f POWHEG-BOX-MOD/init_phys.f
--- POWHEG-BOX/init_phys.f	2018-12-07 18:52:19.000000001 +0100
+++ POWHEG-BOX-MOD/init_phys.f	2018-12-07 19:25:05.000000001 +0100
@@ -56,6 +56,12 @@
          write(*,*) ' unimplemented pdf package',whichpdfpk()
          stop
       endif
+      npdf_ia1=powheginput('#ia1')
+      if(npdf_ia1.lt.0) npdf_ia1=1
+      npdf_ia2=powheginput('#ia2')
+      if(npdf_ia2.lt.0) npdf_ia2=1
+      npdf_set=powheginput('#nPDFerrSet')
+      if(npdf_set.lt.0) npdf_set=0
 c     the following are needed only if fullrwgt is on, and are
 c     set in due time. They are better initialized as follows
       pdf_ndns1lhe = pdf_ndns1
diff -ru POWHEG-BOX/lhapdf6if.f POWHEG-BOX-MOD/lhapdf6if.f
--- POWHEG-BOX/lhapdf6if.f	2018-12-07 18:52:13.000000001 +0100
+++ POWHEG-BOX-MOD/lhapdf6if.f	2018-12-09 00:56:14.000000001 +0100
@@ -162,7 +162,7 @@
       return
       end
 
-      subroutine genericpdf(ndns,ih,xmu2,x,fx)
+      subroutine genericpdf(ndns,ih,nPDFset,ia,xmu2,x,fx)
 c Interface to lhapdf package.
       implicit none
       include 'nlegborn.h'
@@ -173,11 +173,11 @@
       common/cgenericpdf/lam5,iord,iset,maxsets
 
 
-      integer ndns,ih
+      integer ndns,ih,nPDFset,ia
       real * 8 xmu2,x,fx(-pdf_nparton:pdf_nparton)
       real * 8 fxlha(-6:6)
       integer j
-      real * 8 tmp
+      real * 8 tmp,A,Z
       real*8 photon
       call genericpdfset(ndns)
 
@@ -186,6 +186,9 @@
       if (ndns.eq.20460) then
           call xfphoton(x,sqrt(xmu2),photon)
       else
+          if ((nPDFset.ge.1).and.(ia.eq.208)) then
+            call xfhi(nPDFset,ia,x,xmu2,fxlha)
+          endif
           photon=0d0
       endif
 
@@ -194,8 +197,18 @@
       if(pdf_nparton.ge.22) then
          fx(22)=photon/x
       endif
+      if(ia.eq.208) then
+c 208 is Lead ion (Suggested by Andre Stahl, 18/5/2017)
+         A=208.d0
+         Z=82.d0
+         tmp=fx(-2)
+         fx(-2)=fx(-2)*Z/A + fx(-1)*(A-Z)/A
+         fx(-1)=fx(-1)*Z/A + tmp*(A-Z)/A
+         tmp=fx(1)
+         fx(1)=fx(1)*Z/A + fx(2)*(A-Z)/A
+         fx(2)=fx(2)*Z/A + tmp*(A-Z)/A
 c 1 is proton, -1 is antiproton, 3 is pi+, -3 is pi-
-      if(ih.eq.1) then
+      elseif(ih.eq.1) then
          return
       elseif(ih.eq.-1) then
          do j=1,6
@@ -268,3 +281,39 @@
       alphaspdf=tmp
       return
       end
+
+c evolve routine for EPPS16 nPDF
+      subroutine xfhi(ipset,ia,xin,Q2in,f)
+      implicit none
+      integer iorder,ipset,ia
+      real*8 x,Q,f(-6:6)
+      real*8 ruv,rdv,ru,rd,rs,rc,rb,rt,rg
+      real*8 xin,Q2in
+
+c check range of x and Q. Freeze in boundaries of EPPS16
+      if(x.gt.1.d0) write(*,*) "EPPS16 warning: x>1"
+      if(Q2in.gt.100000000.d0) write(*,*) "EPPS16 warning: Q>10000GeV"
+      x = max(0.0000001,min(1.d0,xin))
+      Q = sqrt(max(0.d0,1.69d0,min(100000000.d0,Q2in)))
+
+      iorder=2
+      if(ipset.lt.1) ipset=1
+      call epps16(iorder,ipset,ia,x,Q,ruv,rdv,ru,rd,rs,rc,rb,rg)
+      rt = 1.0d0
+
+      f(0) = f(0)*rg
+      f(1) = f(1)*rdv-f(-1)*(rdv-rd)
+      f(2) = f(2)*ruv-f(-2)*(ruv-ru)
+      f(3) = f(3)*rs
+      f(4) = f(4)*rc
+      f(5) = f(5)*rb
+      f(6) = f(6)*rt
+      f(-6) = f(-6)*rt
+      f(-5) = f(-5)*rb
+      f(-4) = f(-4)*rc
+      f(-3) = f(-3)*rs
+      f(-2) = f(-2)*ru
+      f(-1) = f(-1)*rd
+
+      return
+      end
diff -ru POWHEG-BOX/lhapdfif.f POWHEG-BOX-MOD/lhapdfif.f
--- POWHEG-BOX/lhapdfif.f	2018-12-07 18:52:09.000000001 +0100
+++ POWHEG-BOX-MOD/lhapdfif.f	2018-12-09 00:56:32.000000001 +0100
@@ -136,16 +136,16 @@
       return
       end
 
-      subroutine genericpdf(ndns,ih,xmu2,x,fx)
+      subroutine genericpdf(ndns,ih,nPDFset,ia,xmu2,x,fx)
 c Interface to lhapdf package.
       implicit none
       include 'nlegborn.h'
       include 'pwhg_pdf.h'
-      integer ndns,ih
+      integer ndns,ih,nPDFset,ia
       real * 8 xmu2,x,fx(-pdf_nparton:pdf_nparton)
       real * 8 fxlha(-6:6)
       integer j
-      real * 8 tmp
+      real * 8 tmp,A,Z
       real*8 photon
       call genericpdfset(ndns)
 
@@ -154,6 +154,9 @@
           call evolvePDFphoton(x,sqrt(xmu2),fxlha,photon)
       else
           call evolvePDF(x,sqrt(xmu2),fxlha)
+          if ((nPDFset.ge.1).and.(ia.eq.208)) then
+            call xfhi(nPDFset,ia,x,xmu2,fxlha)
+          endif
           photon=0d0
       endif
 c pftopdg returns density times x
@@ -162,8 +165,18 @@
       if(pdf_nparton.ge.22) then
          fx(22)=photon/x
       endif
+      if(ia.eq.208) then
+c 208 is Lead ion (Suggested by Andre Stahl, 18/5/2017)
+         A=208.d0
+         Z=82.d0
+         tmp=fx(-2)
+         fx(-2)=fx(-2)*Z/A + fx(-1)*(A-Z)/A
+         fx(-1)=fx(-1)*Z/A + tmp*(A-Z)/A
+         tmp=fx(1)
+         fx(1)=fx(1)*Z/A + fx(2)*(A-Z)/A
+         fx(2)=fx(2)*Z/A + tmp*(A-Z)/A
 c 1 is proton, -1 is antiproton, 3 is pi+, -3 is pi-
-      if(ih.eq.1) then
+      elseif(ih.eq.1) then
          return
       elseif(ih.eq.-1) then
          do j=1,6
@@ -222,3 +235,39 @@
       character * 3 whichpdfpk
       whichpdfpk='lha'
       end
+
+c evolve routine for EPPS16 nPDF
+      subroutine xfhi(ipset,ia,xin,Q2in,f)
+      implicit none
+      integer iorder,ipset,ia
+      real*8 x,Q,f(-6:6)
+      real*8 ruv,rdv,ru,rd,rs,rc,rb,rt,rg
+      real*8 xin,Q2in
+
+c check range of x and Q. Freeze in boundaries of EPPS16
+      if(x.gt.1.d0) write(*,*) "EPPS16 warning: x>1"
+      if(Q2in.gt.100000000.d0) write(*,*) "EPPS16 warning: Q>10000GeV"
+      x = max(0.0000001,min(1.d0,xin))
+      Q = sqrt(max(0.d0,1.69d0,min(100000000.d0,Q2in)))
+
+      iorder=2
+      if(ipset.lt.1) ipset=1
+      call epps16(iorder,ipset,ia,x,Q,ruv,rdv,ru,rd,rs,rc,rb,rg)
+      rt = 1.0d0
+
+      f(0) = f(0)*rg
+      f(1) = f(1)*rdv-f(-1)*(rdv-rd)
+      f(2) = f(2)*ruv-f(-2)*(ruv-ru)
+      f(3) = f(3)*rs
+      f(4) = f(4)*rc
+      f(5) = f(5)*rb
+      f(6) = f(6)*rt
+      f(-6) = f(-6)*rt
+      f(-5) = f(-5)*rb
+      f(-4) = f(-4)*rc
+      f(-3) = f(-3)*rs
+      f(-2) = f(-2)*ru
+      f(-1) = f(-1)*rd
+
+      return
+      end
diff -ru POWHEG-BOX/pdfcalls.f POWHEG-BOX-MOD/pdfcalls.f
--- POWHEG-BOX/pdfcalls.f	2018-12-07 18:52:32.000000001 +0100
+++ POWHEG-BOX-MOD/pdfcalls.f	2018-12-07 16:34:17.000000001 +0100
@@ -13,9 +13,11 @@
          return
       endif
       if(ih.eq.1) then
-         call genericpdf0(pdf_ndns1,pdf_ih1,st_mufact2,x,pdf)
+         call genericpdf0(pdf_ndns1,pdf_ih1,npdf_set,npdf_ia1,
+     1   st_mufact2,x,pdf)
       elseif(ih.eq.2) then
-         call genericpdf0(pdf_ndns2,pdf_ih2,st_mufact2,x,pdf)
+         call genericpdf0(pdf_ndns2,pdf_ih2,npdf_set,npdf_ia2,
+     1   st_mufact2,x,pdf)
       else
          write(*,*) ' pdfcall: invalid call, ih=',ih
          stop
@@ -29,12 +31,12 @@
 c In this framework it is found that nrec=8 would be enough.
 c This provides a remarkable increase in spead (better than a factor of 3)
 c when cteq6 pdf are used.
-      subroutine genericpdf0(ns,ih,xmu2,x,fx)
+      subroutine genericpdf0(ns,ih,nPDFset,ia,xmu2,x,fx)
       implicit none
       include 'pwhg_pdf.h'
       integer maxparton
       parameter (maxparton=22)
-      integer ns,ih
+      integer ns,ih,nPDFset,ia
       real * 8 xmu2,x,fx(-pdf_nparton:pdf_nparton)
       integer nrec
       parameter (nrec=10)
@@ -87,7 +89,8 @@
       oih(irec)=ih
       oxmu2(irec)=xmu2
       ox(irec)=x
-      call genericpdf(ns,ih,xmu2,x,ofx(-pdf_nparton:pdf_nparton,irec))
+      call genericpdf(ns,ih,nPDFset,ia,xmu2,x,
+     &ofx(-pdf_nparton:pdf_nparton,irec))
 c Flavour thresholds:
       if(xmu2.lt.bottomthr2) then
          ofx(5,irec)=0
diff -ru POWHEG-BOX/rwl_setup_param_weights.f POWHEG-BOX-MOD/rwl_setup_param_weights.f
--- POWHEG-BOX/rwl_setup_param_weights.f	2018-12-07 18:52:25.000000001 +0100
+++ POWHEG-BOX-MOD/rwl_setup_param_weights.f	2018-12-07 15:31:11.000000001 +0100
@@ -1,7 +1,7 @@
       subroutine rwl_setup_params_weights(count)
       implicit none
       integer count
-      integer, save :: old_pdf1,old_pdf2
+      integer, save :: old_pdf1,old_pdf2,old_npdf
       real * 8, save :: old_facfact,old_renfact
       include 'pwhg_rwl.h'
       include 'pwhg_pdf.h'
@@ -13,11 +13,13 @@
       if(count==0) then
          old_pdf1=pdf_ndns1
          old_pdf2=pdf_ndns2
+         old_npdf=npdf_set
          old_facfact = st_facfact
          old_renfact = st_renfact
       elseif(count == -1) then
          pdf_ndns1 = old_pdf1
          pdf_ndns2 = old_pdf2
+         npdf_set = old_npdf
          st_facfact = old_facfact
          st_renfact = old_renfact
          call genericpdfpar(pdf_ndns1,pdf_ih1,st_lambda5MSB,
@@ -41,5 +43,8 @@
          if(rwl_keypresent(count,'renscfact',val)) then
             st_renfact = val
          endif
+         if(rwl_keypresent(count,'nPDFerrSet',val)) then
+            npdf_set = nint(val)
+         endif
       endif
       end
